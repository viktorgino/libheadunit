// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bluetooth.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_Bluetooth_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Bluetooth_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Bluetooth_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Bluetooth_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Bluetooth_2eproto;
namespace HU {
class WifiInfoRequest;
struct WifiInfoRequestDefaultTypeInternal;
extern WifiInfoRequestDefaultTypeInternal _WifiInfoRequest_default_instance_;
class WifiInfoResponse;
struct WifiInfoResponseDefaultTypeInternal;
extern WifiInfoResponseDefaultTypeInternal _WifiInfoResponse_default_instance_;
class WifiSecurityReponse;
struct WifiSecurityReponseDefaultTypeInternal;
extern WifiSecurityReponseDefaultTypeInternal _WifiSecurityReponse_default_instance_;
}  // namespace HU
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace HU {
enum WifiSecurityReponse_SecurityMode : int {
  WifiSecurityReponse_SecurityMode_UNKNOWN_SECURITY_MODE = 0,
  WifiSecurityReponse_SecurityMode_OPEN = 1,
  WifiSecurityReponse_SecurityMode_WEP_64 = 2,
  WifiSecurityReponse_SecurityMode_WEP_128 = 3,
  WifiSecurityReponse_SecurityMode_WPA_PERSONAL = 4,
  WifiSecurityReponse_SecurityMode_WPA2_PERSONAL = 8,
  WifiSecurityReponse_SecurityMode_WPA_WPA2_PERSONAL = 12,
  WifiSecurityReponse_SecurityMode_WPA_ENTERPRISE = 20,
  WifiSecurityReponse_SecurityMode_WPA2_ENTERPRISE = 24,
  WifiSecurityReponse_SecurityMode_WPA_WPA2_ENTERPRISE = 28,
};

bool WifiSecurityReponse_SecurityMode_IsValid(int value);
extern const uint32_t WifiSecurityReponse_SecurityMode_internal_data_[];
constexpr WifiSecurityReponse_SecurityMode WifiSecurityReponse_SecurityMode_SecurityMode_MIN = static_cast<WifiSecurityReponse_SecurityMode>(0);
constexpr WifiSecurityReponse_SecurityMode WifiSecurityReponse_SecurityMode_SecurityMode_MAX = static_cast<WifiSecurityReponse_SecurityMode>(28);
constexpr int WifiSecurityReponse_SecurityMode_SecurityMode_ARRAYSIZE = 28 + 1;
const ::google::protobuf::EnumDescriptor*
WifiSecurityReponse_SecurityMode_descriptor();
template <typename T>
const std::string& WifiSecurityReponse_SecurityMode_Name(T value) {
  static_assert(std::is_same<T, WifiSecurityReponse_SecurityMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SecurityMode_Name().");
  return ::google::protobuf::internal::NameOfEnum(WifiSecurityReponse_SecurityMode_descriptor(), value);
}
inline bool WifiSecurityReponse_SecurityMode_Parse(absl::string_view name, WifiSecurityReponse_SecurityMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WifiSecurityReponse_SecurityMode>(
      WifiSecurityReponse_SecurityMode_descriptor(), name, value);
}
enum WifiSecurityReponse_AccessPointType : int {
  WifiSecurityReponse_AccessPointType_STATIC = 0,
  WifiSecurityReponse_AccessPointType_DYNAMIC = 1,
};

bool WifiSecurityReponse_AccessPointType_IsValid(int value);
extern const uint32_t WifiSecurityReponse_AccessPointType_internal_data_[];
constexpr WifiSecurityReponse_AccessPointType WifiSecurityReponse_AccessPointType_AccessPointType_MIN = static_cast<WifiSecurityReponse_AccessPointType>(0);
constexpr WifiSecurityReponse_AccessPointType WifiSecurityReponse_AccessPointType_AccessPointType_MAX = static_cast<WifiSecurityReponse_AccessPointType>(1);
constexpr int WifiSecurityReponse_AccessPointType_AccessPointType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
WifiSecurityReponse_AccessPointType_descriptor();
template <typename T>
const std::string& WifiSecurityReponse_AccessPointType_Name(T value) {
  static_assert(std::is_same<T, WifiSecurityReponse_AccessPointType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AccessPointType_Name().");
  return WifiSecurityReponse_AccessPointType_Name(static_cast<WifiSecurityReponse_AccessPointType>(value));
}
template <>
inline const std::string& WifiSecurityReponse_AccessPointType_Name(WifiSecurityReponse_AccessPointType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WifiSecurityReponse_AccessPointType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool WifiSecurityReponse_AccessPointType_Parse(absl::string_view name, WifiSecurityReponse_AccessPointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WifiSecurityReponse_AccessPointType>(
      WifiSecurityReponse_AccessPointType_descriptor(), name, value);
}
enum WifiInfoResponse_Status : int {
  WifiInfoResponse_Status_STATUS_UNSOLICITED_MESSAGE = 1,
  WifiInfoResponse_Status_STATUS_SUCCESS = 0,
  WifiInfoResponse_Status_STATUS_NO_COMPATIBLE_VERSION = -1,
  WifiInfoResponse_Status_STATUS_WIFI_INACCESSIBLE_CHANNEL = -2,
  WifiInfoResponse_Status_STATUS_WIFI_INCORRECT_CREDENTIALS = -3,
  WifiInfoResponse_Status_STATUS_PROJECTION_ALREADY_STARTED = -4,
  WifiInfoResponse_Status_STATUS_WIFI_DISABLED = -5,
  WifiInfoResponse_Status_STATUS_WIFI_NOT_YET_STARTED = -6,
  WifiInfoResponse_Status_STATUS_INVALID_HOST = -7,
  WifiInfoResponse_Status_STATUS_NO_SUPPORTED_WIFI_CHANNELS = -8,
  WifiInfoResponse_Status_STATUS_INSTRUCT_USER_TO_CHECK_THE_PHONE = -9,
  WifiInfoResponse_Status_STATUS_PHONE_WIFI_DISABLED = -10,
};

bool WifiInfoResponse_Status_IsValid(int value);
extern const uint32_t WifiInfoResponse_Status_internal_data_[];
constexpr WifiInfoResponse_Status WifiInfoResponse_Status_Status_MIN = static_cast<WifiInfoResponse_Status>(-10);
constexpr WifiInfoResponse_Status WifiInfoResponse_Status_Status_MAX = static_cast<WifiInfoResponse_Status>(1);
constexpr int WifiInfoResponse_Status_Status_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
WifiInfoResponse_Status_descriptor();
template <typename T>
const std::string& WifiInfoResponse_Status_Name(T value) {
  static_assert(std::is_same<T, WifiInfoResponse_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return WifiInfoResponse_Status_Name(static_cast<WifiInfoResponse_Status>(value));
}
template <>
inline const std::string& WifiInfoResponse_Status_Name(WifiInfoResponse_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WifiInfoResponse_Status_descriptor,
                                                 -10, 1>(
      static_cast<int>(value));
}
inline bool WifiInfoResponse_Status_Parse(absl::string_view name, WifiInfoResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WifiInfoResponse_Status>(
      WifiInfoResponse_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WifiSecurityReponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HU.WifiSecurityReponse) */ {
 public:
  inline WifiSecurityReponse() : WifiSecurityReponse(nullptr) {}
  ~WifiSecurityReponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WifiSecurityReponse(::google::protobuf::internal::ConstantInitialized);

  inline WifiSecurityReponse(const WifiSecurityReponse& from)
      : WifiSecurityReponse(nullptr, from) {}
  WifiSecurityReponse(WifiSecurityReponse&& from) noexcept
    : WifiSecurityReponse() {
    *this = ::std::move(from);
  }

  inline WifiSecurityReponse& operator=(const WifiSecurityReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiSecurityReponse& operator=(WifiSecurityReponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WifiSecurityReponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiSecurityReponse* internal_default_instance() {
    return reinterpret_cast<const WifiSecurityReponse*>(
               &_WifiSecurityReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WifiSecurityReponse& a, WifiSecurityReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiSecurityReponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiSecurityReponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiSecurityReponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiSecurityReponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WifiSecurityReponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WifiSecurityReponse& from) {
    WifiSecurityReponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WifiSecurityReponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "HU.WifiSecurityReponse";
  }
  protected:
  explicit WifiSecurityReponse(::google::protobuf::Arena* arena);
  WifiSecurityReponse(::google::protobuf::Arena* arena, const WifiSecurityReponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SecurityMode = WifiSecurityReponse_SecurityMode;
  static constexpr SecurityMode UNKNOWN_SECURITY_MODE = WifiSecurityReponse_SecurityMode_UNKNOWN_SECURITY_MODE;
  static constexpr SecurityMode OPEN = WifiSecurityReponse_SecurityMode_OPEN;
  static constexpr SecurityMode WEP_64 = WifiSecurityReponse_SecurityMode_WEP_64;
  static constexpr SecurityMode WEP_128 = WifiSecurityReponse_SecurityMode_WEP_128;
  static constexpr SecurityMode WPA_PERSONAL = WifiSecurityReponse_SecurityMode_WPA_PERSONAL;
  static constexpr SecurityMode WPA2_PERSONAL = WifiSecurityReponse_SecurityMode_WPA2_PERSONAL;
  static constexpr SecurityMode WPA_WPA2_PERSONAL = WifiSecurityReponse_SecurityMode_WPA_WPA2_PERSONAL;
  static constexpr SecurityMode WPA_ENTERPRISE = WifiSecurityReponse_SecurityMode_WPA_ENTERPRISE;
  static constexpr SecurityMode WPA2_ENTERPRISE = WifiSecurityReponse_SecurityMode_WPA2_ENTERPRISE;
  static constexpr SecurityMode WPA_WPA2_ENTERPRISE = WifiSecurityReponse_SecurityMode_WPA_WPA2_ENTERPRISE;
  static inline bool SecurityMode_IsValid(int value) {
    return WifiSecurityReponse_SecurityMode_IsValid(value);
  }
  static constexpr SecurityMode SecurityMode_MIN = WifiSecurityReponse_SecurityMode_SecurityMode_MIN;
  static constexpr SecurityMode SecurityMode_MAX = WifiSecurityReponse_SecurityMode_SecurityMode_MAX;
  static constexpr int SecurityMode_ARRAYSIZE = WifiSecurityReponse_SecurityMode_SecurityMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SecurityMode_descriptor() {
    return WifiSecurityReponse_SecurityMode_descriptor();
  }
  template <typename T>
  static inline const std::string& SecurityMode_Name(T value) {
    return WifiSecurityReponse_SecurityMode_Name(value);
  }
  static inline bool SecurityMode_Parse(absl::string_view name, SecurityMode* value) {
    return WifiSecurityReponse_SecurityMode_Parse(name, value);
  }

  using AccessPointType = WifiSecurityReponse_AccessPointType;
  static constexpr AccessPointType STATIC = WifiSecurityReponse_AccessPointType_STATIC;
  static constexpr AccessPointType DYNAMIC = WifiSecurityReponse_AccessPointType_DYNAMIC;
  static inline bool AccessPointType_IsValid(int value) {
    return WifiSecurityReponse_AccessPointType_IsValid(value);
  }
  static constexpr AccessPointType AccessPointType_MIN = WifiSecurityReponse_AccessPointType_AccessPointType_MIN;
  static constexpr AccessPointType AccessPointType_MAX = WifiSecurityReponse_AccessPointType_AccessPointType_MAX;
  static constexpr int AccessPointType_ARRAYSIZE = WifiSecurityReponse_AccessPointType_AccessPointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AccessPointType_descriptor() {
    return WifiSecurityReponse_AccessPointType_descriptor();
  }
  template <typename T>
  static inline const std::string& AccessPointType_Name(T value) {
    return WifiSecurityReponse_AccessPointType_Name(value);
  }
  static inline bool AccessPointType_Parse(absl::string_view name, AccessPointType* value) {
    return WifiSecurityReponse_AccessPointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kKeyFieldNumber = 2,
    kBssidFieldNumber = 3,
    kSecurityModeFieldNumber = 4,
    kAccessPointTypeFieldNumber = 5,
  };
  // required string ssid = 1;
  bool has_ssid() const;
  void clear_ssid() ;
  const std::string& ssid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ssid(Arg_&& arg, Args_... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* value);

  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(
      const std::string& value);
  std::string* _internal_mutable_ssid();

  public:
  // required string key = 2;
  bool has_key() const;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // required string bssid = 3;
  bool has_bssid() const;
  void clear_bssid() ;
  const std::string& bssid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bssid(Arg_&& arg, Args_... args);
  std::string* mutable_bssid();
  PROTOBUF_NODISCARD std::string* release_bssid();
  void set_allocated_bssid(std::string* value);

  private:
  const std::string& _internal_bssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bssid(
      const std::string& value);
  std::string* _internal_mutable_bssid();

  public:
  // required .HU.WifiSecurityReponse.SecurityMode security_mode = 4;
  bool has_security_mode() const;
  void clear_security_mode() ;
  ::HU::WifiSecurityReponse_SecurityMode security_mode() const;
  void set_security_mode(::HU::WifiSecurityReponse_SecurityMode value);

  private:
  ::HU::WifiSecurityReponse_SecurityMode _internal_security_mode() const;
  void _internal_set_security_mode(::HU::WifiSecurityReponse_SecurityMode value);

  public:
  // required .HU.WifiSecurityReponse.AccessPointType access_point_type = 5;
  bool has_access_point_type() const;
  void clear_access_point_type() ;
  ::HU::WifiSecurityReponse_AccessPointType access_point_type() const;
  void set_access_point_type(::HU::WifiSecurityReponse_AccessPointType value);

  private:
  ::HU::WifiSecurityReponse_AccessPointType _internal_access_point_type() const;
  void _internal_set_access_point_type(::HU::WifiSecurityReponse_AccessPointType value);

  public:
  // @@protoc_insertion_point(class_scope:HU.WifiSecurityReponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ssid_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr bssid_;
    int security_mode_;
    int access_point_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Bluetooth_2eproto;
};// -------------------------------------------------------------------

class WifiInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HU.WifiInfoResponse) */ {
 public:
  inline WifiInfoResponse() : WifiInfoResponse(nullptr) {}
  ~WifiInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WifiInfoResponse(::google::protobuf::internal::ConstantInitialized);

  inline WifiInfoResponse(const WifiInfoResponse& from)
      : WifiInfoResponse(nullptr, from) {}
  WifiInfoResponse(WifiInfoResponse&& from) noexcept
    : WifiInfoResponse() {
    *this = ::std::move(from);
  }

  inline WifiInfoResponse& operator=(const WifiInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiInfoResponse& operator=(WifiInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WifiInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiInfoResponse* internal_default_instance() {
    return reinterpret_cast<const WifiInfoResponse*>(
               &_WifiInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WifiInfoResponse& a, WifiInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WifiInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WifiInfoResponse& from) {
    WifiInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WifiInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "HU.WifiInfoResponse";
  }
  protected:
  explicit WifiInfoResponse(::google::protobuf::Arena* arena);
  WifiInfoResponse(::google::protobuf::Arena* arena, const WifiInfoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Status = WifiInfoResponse_Status;
  static constexpr Status STATUS_UNSOLICITED_MESSAGE = WifiInfoResponse_Status_STATUS_UNSOLICITED_MESSAGE;
  static constexpr Status STATUS_SUCCESS = WifiInfoResponse_Status_STATUS_SUCCESS;
  static constexpr Status STATUS_NO_COMPATIBLE_VERSION = WifiInfoResponse_Status_STATUS_NO_COMPATIBLE_VERSION;
  static constexpr Status STATUS_WIFI_INACCESSIBLE_CHANNEL = WifiInfoResponse_Status_STATUS_WIFI_INACCESSIBLE_CHANNEL;
  static constexpr Status STATUS_WIFI_INCORRECT_CREDENTIALS = WifiInfoResponse_Status_STATUS_WIFI_INCORRECT_CREDENTIALS;
  static constexpr Status STATUS_PROJECTION_ALREADY_STARTED = WifiInfoResponse_Status_STATUS_PROJECTION_ALREADY_STARTED;
  static constexpr Status STATUS_WIFI_DISABLED = WifiInfoResponse_Status_STATUS_WIFI_DISABLED;
  static constexpr Status STATUS_WIFI_NOT_YET_STARTED = WifiInfoResponse_Status_STATUS_WIFI_NOT_YET_STARTED;
  static constexpr Status STATUS_INVALID_HOST = WifiInfoResponse_Status_STATUS_INVALID_HOST;
  static constexpr Status STATUS_NO_SUPPORTED_WIFI_CHANNELS = WifiInfoResponse_Status_STATUS_NO_SUPPORTED_WIFI_CHANNELS;
  static constexpr Status STATUS_INSTRUCT_USER_TO_CHECK_THE_PHONE = WifiInfoResponse_Status_STATUS_INSTRUCT_USER_TO_CHECK_THE_PHONE;
  static constexpr Status STATUS_PHONE_WIFI_DISABLED = WifiInfoResponse_Status_STATUS_PHONE_WIFI_DISABLED;
  static inline bool Status_IsValid(int value) {
    return WifiInfoResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = WifiInfoResponse_Status_Status_MIN;
  static constexpr Status Status_MAX = WifiInfoResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = WifiInfoResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return WifiInfoResponse_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return WifiInfoResponse_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return WifiInfoResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kPortFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional string ip_address = 1;
  bool has_ip_address() const;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // optional uint32 port = 2;
  bool has_port() const;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // required .HU.WifiInfoResponse.Status status = 3;
  bool has_status() const;
  void clear_status() ;
  ::HU::WifiInfoResponse_Status status() const;
  void set_status(::HU::WifiInfoResponse_Status value);

  private:
  ::HU::WifiInfoResponse_Status _internal_status() const;
  void _internal_set_status(::HU::WifiInfoResponse_Status value);

  public:
  // @@protoc_insertion_point(class_scope:HU.WifiInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    ::uint32_t port_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Bluetooth_2eproto;
};// -------------------------------------------------------------------

class WifiInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HU.WifiInfoRequest) */ {
 public:
  inline WifiInfoRequest() : WifiInfoRequest(nullptr) {}
  ~WifiInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WifiInfoRequest(::google::protobuf::internal::ConstantInitialized);

  inline WifiInfoRequest(const WifiInfoRequest& from)
      : WifiInfoRequest(nullptr, from) {}
  WifiInfoRequest(WifiInfoRequest&& from) noexcept
    : WifiInfoRequest() {
    *this = ::std::move(from);
  }

  inline WifiInfoRequest& operator=(const WifiInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiInfoRequest& operator=(WifiInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WifiInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiInfoRequest* internal_default_instance() {
    return reinterpret_cast<const WifiInfoRequest*>(
               &_WifiInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WifiInfoRequest& a, WifiInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WifiInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WifiInfoRequest& from) {
    WifiInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WifiInfoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "HU.WifiInfoRequest";
  }
  protected:
  explicit WifiInfoRequest(::google::protobuf::Arena* arena);
  WifiInfoRequest(::google::protobuf::Arena* arena, const WifiInfoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // required string ip_address = 1;
  bool has_ip_address() const;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // optional uint32 port = 2;
  bool has_port() const;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:HU.WifiInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    ::uint32_t port_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Bluetooth_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WifiSecurityReponse

// required string ssid = 1;
inline bool WifiSecurityReponse::has_ssid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WifiSecurityReponse::clear_ssid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ssid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiSecurityReponse::ssid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HU.WifiSecurityReponse.ssid)
  return _internal_ssid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WifiSecurityReponse::set_ssid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ssid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HU.WifiSecurityReponse.ssid)
}
inline std::string* WifiSecurityReponse::mutable_ssid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:HU.WifiSecurityReponse.ssid)
  return _s;
}
inline const std::string& WifiSecurityReponse::_internal_ssid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ssid_.Get();
}
inline void WifiSecurityReponse::_internal_set_ssid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ssid_.Set(value, GetArena());
}
inline std::string* WifiSecurityReponse::_internal_mutable_ssid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ssid_.Mutable( GetArena());
}
inline std::string* WifiSecurityReponse::release_ssid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:HU.WifiSecurityReponse.ssid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ssid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ssid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WifiSecurityReponse::set_allocated_ssid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ssid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ssid_.IsDefault()) {
          _impl_.ssid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HU.WifiSecurityReponse.ssid)
}

// required string key = 2;
inline bool WifiSecurityReponse::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WifiSecurityReponse::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WifiSecurityReponse::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HU.WifiSecurityReponse.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WifiSecurityReponse::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HU.WifiSecurityReponse.key)
}
inline std::string* WifiSecurityReponse::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HU.WifiSecurityReponse.key)
  return _s;
}
inline const std::string& WifiSecurityReponse::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void WifiSecurityReponse::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* WifiSecurityReponse::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* WifiSecurityReponse::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:HU.WifiSecurityReponse.key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WifiSecurityReponse::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HU.WifiSecurityReponse.key)
}

// required string bssid = 3;
inline bool WifiSecurityReponse::has_bssid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void WifiSecurityReponse::clear_bssid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bssid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WifiSecurityReponse::bssid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HU.WifiSecurityReponse.bssid)
  return _internal_bssid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WifiSecurityReponse::set_bssid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bssid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HU.WifiSecurityReponse.bssid)
}
inline std::string* WifiSecurityReponse::mutable_bssid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bssid();
  // @@protoc_insertion_point(field_mutable:HU.WifiSecurityReponse.bssid)
  return _s;
}
inline const std::string& WifiSecurityReponse::_internal_bssid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bssid_.Get();
}
inline void WifiSecurityReponse::_internal_set_bssid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bssid_.Set(value, GetArena());
}
inline std::string* WifiSecurityReponse::_internal_mutable_bssid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.bssid_.Mutable( GetArena());
}
inline std::string* WifiSecurityReponse::release_bssid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:HU.WifiSecurityReponse.bssid)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.bssid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bssid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WifiSecurityReponse::set_allocated_bssid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.bssid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bssid_.IsDefault()) {
          _impl_.bssid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HU.WifiSecurityReponse.bssid)
}

// required .HU.WifiSecurityReponse.SecurityMode security_mode = 4;
inline bool WifiSecurityReponse::has_security_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void WifiSecurityReponse::clear_security_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.security_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::HU::WifiSecurityReponse_SecurityMode WifiSecurityReponse::security_mode() const {
  // @@protoc_insertion_point(field_get:HU.WifiSecurityReponse.security_mode)
  return _internal_security_mode();
}
inline void WifiSecurityReponse::set_security_mode(::HU::WifiSecurityReponse_SecurityMode value) {
  _internal_set_security_mode(value);
  // @@protoc_insertion_point(field_set:HU.WifiSecurityReponse.security_mode)
}
inline ::HU::WifiSecurityReponse_SecurityMode WifiSecurityReponse::_internal_security_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::HU::WifiSecurityReponse_SecurityMode>(_impl_.security_mode_);
}
inline void WifiSecurityReponse::_internal_set_security_mode(::HU::WifiSecurityReponse_SecurityMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::HU::WifiSecurityReponse_SecurityMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.security_mode_ = value;
}

// required .HU.WifiSecurityReponse.AccessPointType access_point_type = 5;
inline bool WifiSecurityReponse::has_access_point_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void WifiSecurityReponse::clear_access_point_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.access_point_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::HU::WifiSecurityReponse_AccessPointType WifiSecurityReponse::access_point_type() const {
  // @@protoc_insertion_point(field_get:HU.WifiSecurityReponse.access_point_type)
  return _internal_access_point_type();
}
inline void WifiSecurityReponse::set_access_point_type(::HU::WifiSecurityReponse_AccessPointType value) {
  _internal_set_access_point_type(value);
  // @@protoc_insertion_point(field_set:HU.WifiSecurityReponse.access_point_type)
}
inline ::HU::WifiSecurityReponse_AccessPointType WifiSecurityReponse::_internal_access_point_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::HU::WifiSecurityReponse_AccessPointType>(_impl_.access_point_type_);
}
inline void WifiSecurityReponse::_internal_set_access_point_type(::HU::WifiSecurityReponse_AccessPointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::HU::WifiSecurityReponse_AccessPointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.access_point_type_ = value;
}

// -------------------------------------------------------------------

// WifiInfoRequest

// required string ip_address = 1;
inline bool WifiInfoRequest::has_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WifiInfoRequest::clear_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiInfoRequest::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HU.WifiInfoRequest.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WifiInfoRequest::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HU.WifiInfoRequest.ip_address)
}
inline std::string* WifiInfoRequest::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:HU.WifiInfoRequest.ip_address)
  return _s;
}
inline const std::string& WifiInfoRequest::_internal_ip_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_address_.Get();
}
inline void WifiInfoRequest::_internal_set_ip_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* WifiInfoRequest::_internal_mutable_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* WifiInfoRequest::release_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:HU.WifiInfoRequest.ip_address)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ip_address_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_address_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WifiInfoRequest::set_allocated_ip_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_address_.IsDefault()) {
          _impl_.ip_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HU.WifiInfoRequest.ip_address)
}

// optional uint32 port = 2;
inline bool WifiInfoRequest::has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WifiInfoRequest::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t WifiInfoRequest::port() const {
  // @@protoc_insertion_point(field_get:HU.WifiInfoRequest.port)
  return _internal_port();
}
inline void WifiInfoRequest::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:HU.WifiInfoRequest.port)
}
inline ::uint32_t WifiInfoRequest::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void WifiInfoRequest::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// WifiInfoResponse

// optional string ip_address = 1;
inline bool WifiInfoResponse::has_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WifiInfoResponse::clear_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiInfoResponse::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HU.WifiInfoResponse.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WifiInfoResponse::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HU.WifiInfoResponse.ip_address)
}
inline std::string* WifiInfoResponse::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:HU.WifiInfoResponse.ip_address)
  return _s;
}
inline const std::string& WifiInfoResponse::_internal_ip_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_address_.Get();
}
inline void WifiInfoResponse::_internal_set_ip_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* WifiInfoResponse::_internal_mutable_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* WifiInfoResponse::release_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:HU.WifiInfoResponse.ip_address)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ip_address_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_address_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WifiInfoResponse::set_allocated_ip_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_address_.IsDefault()) {
          _impl_.ip_address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HU.WifiInfoResponse.ip_address)
}

// optional uint32 port = 2;
inline bool WifiInfoResponse::has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WifiInfoResponse::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t WifiInfoResponse::port() const {
  // @@protoc_insertion_point(field_get:HU.WifiInfoResponse.port)
  return _internal_port();
}
inline void WifiInfoResponse::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:HU.WifiInfoResponse.port)
}
inline ::uint32_t WifiInfoResponse::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void WifiInfoResponse::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.port_ = value;
}

// required .HU.WifiInfoResponse.Status status = 3;
inline bool WifiInfoResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void WifiInfoResponse::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::HU::WifiInfoResponse_Status WifiInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:HU.WifiInfoResponse.status)
  return _internal_status();
}
inline void WifiInfoResponse::set_status(::HU::WifiInfoResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:HU.WifiInfoResponse.status)
}
inline ::HU::WifiInfoResponse_Status WifiInfoResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::HU::WifiInfoResponse_Status>(_impl_.status_);
}
inline void WifiInfoResponse::_internal_set_status(::HU::WifiInfoResponse_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::HU::WifiInfoResponse_Status_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace HU


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::HU::WifiSecurityReponse_SecurityMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::HU::WifiSecurityReponse_SecurityMode>() {
  return ::HU::WifiSecurityReponse_SecurityMode_descriptor();
}
template <>
struct is_proto_enum<::HU::WifiSecurityReponse_AccessPointType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::HU::WifiSecurityReponse_AccessPointType>() {
  return ::HU::WifiSecurityReponse_AccessPointType_descriptor();
}
template <>
struct is_proto_enum<::HU::WifiInfoResponse_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::HU::WifiInfoResponse_Status>() {
  return ::HU::WifiInfoResponse_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Bluetooth_2eproto_2epb_2eh
